//Include wifi and mqtt needed libraries
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

//define connection data for wifi and mqtt
const char* ssid = "SSID";
const char* password = "PASS";
const char* mqtt_server = "IP of MQTT";
const char* mqtt_port = 1883;
const char* Topic = "/Sufragerie/AC/commands";

WiFiClient ESPagbAC;

void setup() {
  
  Serial.begin(115200);
  delay(100);
  setup_wifi();
  Wifi.begin(ssid, password);
  reconnect();
  delay(2000);
}

PubSubClient client(mqtt_server, mqtt_port, callback, ESPagbAC);

void loop() {
  
  //reconnect if connection is lost
  if (!client.connected() && WiFi.status() ==3) {reconnect();}

  //maintain MQTT connection
  client.loop();

  //delay for wifi functions to run
  delay(100);
}

void callback(char* topic, byte* payload, unsigned int lenght) {

  String topicStr = topic;

   if((char)payload[0] == 'O' && (char)payload[1] == 'N') {
    Serial.print("AC-ON");
    respond();  
    }

  if((char)payload[0] == 'O' && (char)payload[1] == 'F' && (char)payload[2] == 'F') {
    Serial.print("AC-OFF");
    respond();  
    }
}

void respond() {
  delay(5);
  if (Serial.available()) {
    char ser =Serial.read();
  switch (ser) {
      case 'AC-is-ON':
    client.publish("/Sufragerie/AC/states", "AC-is-ON");
    break;
      case 'AC-is-OFF':
    client.publish("/Sufragerie/AC/states", "AC-is-OFF");
    break;
    } //switch
  } //if
} //void

void reconnect() {
  if(WiFi.status() != WL_CONNECTED) {
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
    }
  }

if(WiFi.status() ==WL_CONNECTED) {
  while (!client.connected()) {
    String clientName;
    clientName += "ESPagbAC-";
    uint8_t mac[6];
    WiFi.macAddress(mac);
    clientName += macToStr(mac);

    if (client.connect((char*) clientName.c_str())) {
      Serial.print("\tMQTT Connected");
      client.subscribe(Topic);
    }
    else{Serial.println("\tFailed."); abort();}
  }
}
}

String macToStr(const uint8_t* mac) {
  String result;
  for (int i = 0; i < 6; ++i) {
    result += String(mac[i], 16);
    if (i < 5){
      result += ':';
    }
  }
  return result;
}