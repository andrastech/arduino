//WARNING!!!
//This code has not been written by a programmer!
//This is merely a collection of bits and pieces put together
//to make a personal project work

//
//  put together by agb
//

// 
// This code is for the ESP board meant to
// communicate with mqtt
//

#include <ESP8266WiFi.h>                                             //include WiFi library
#include <PubSubClient.h>
#include <SimpleDHT.h>

int pinDHT22 = D2;
SimpleDHT22 dht22;

const char* ssid = "HAN";                                            //set the SSID of wireless network
const char* password = "th1nkpad";                                   //set the wireless network's password
const char* mqtt_server = "172.16.2.170";                            //set the URL or IP address of the MQTT server
const int mqtt_port = 1883;                                          //set the MQTT server's port
const char* TopicIn = "/Sufragerie/Temp";                              //set the subscribe MQTT topic - the one on which messages arrive

WiFiClient WeemosD1agbTEMP;                                                 //create uninitialised client instance

void setup() {
  
  Serial.begin(115200);                                              //start serial with specified baud rate
  delay(100);                                                        //specify delay
  WiFi.begin(ssid, password);                                        //start wifi connection
  reconnect();
  delay(2000);
}

PubSubClient client(mqtt_server, mqtt_port, callback, WeemosD1agbTEMP);     //create configured client instance

void loop() {
  
  if (!client.connected() && WiFi.status() ==3) {reconnect();}       //reconnect if connection is lost
    client.loop();                                                     //maintain MQTT connection
    delay(100);                                                        //delay for wifi functions to run
}

void tempsend(){
  Serial.println("=================================");
  Serial.println("Sample DHT22...");
  
  float temperature = 0;
  float humidity = 0;
  int err = SimpleDHTErrSuccess;
  if ((err = dht22.read2(pinDHT22, &temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
    Serial.print("Read DHT22 failed, err="); Serial.println(err);delay(2000);
    return;
  }
  Serial.print("Sample OK: ");
  Serial.print((float)temperature); Serial.print(" *C, ");
  Serial.print((float)humidity); Serial.println(" RH%");
  client.publish(TopicOut, String(temperature));
  client.publish(TopicOut, String(humidity));
}

void reconnect() {                                                   //function check Wifi status and reconnect
  if(WiFi.status() != WL_CONNECTED) {
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
    }
  }

  if(WiFi.status() ==WL_CONNECTED) {                                   //constructing client name for mqtt connection
    while (!client.connected()) {
      String clientName;
      clientName += "WeemosD1agbTEMP-";
      uint8_t mac[6];
      WiFi.macAddress(mac);
      clientName += macToStr(mac);

      if (client.connect((char*) clientName.c_str())) {
        Serial.print("\tMQTT Connected");
        client.subscribe(TopicIn);                                     //actual mqtt client subscribe
      }
      else{Serial.println("\tFailed."); abort();}
    }
  }
}

String macToStr(const uint8_t* mac) {
  String result;
  for (int i = 0; i < 6; ++i) {
    result += String(mac[i], 16);
    if (i < 5){
      result += ':';
    }
  }
  return result;
}